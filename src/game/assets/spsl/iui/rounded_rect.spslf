
#UNIFORM vec4 uColor;
#UNIFORM vec2 uTopLeft;
#UNIFORM vec2 uWidthHeight;
#UNIFORM float uRadius;

void main() {
    // rounded rectangle shader
    vec2 pos = spsl_fragpos.xy;
    vec2 tl = uTopLeft;
    vec2 wh = uWidthHeight;
    vec2 tr = tl + vec2(wh.x, 0.0);
    vec2 bl = tl + vec2(0.0, wh.y);
    vec2 br = tl + wh;

    spsl_fragcolor = vec4(0.0, 0.0, 0.0, 0.0);

    vec2 r_tl = tl + vec2(uRadius, uRadius);
    vec2 r_tr = tr + vec2(-uRadius, uRadius);
    vec2 r_bl = bl + vec2(uRadius, -uRadius);
    vec2 r_br = br - vec2(uRadius, uRadius);

    if (length(r_tl - pos) < uRadius) {
        spsl_fragcolor = uColor;
    }
    if (length(r_tr - pos) < uRadius) {
        spsl_fragcolor = uColor;
    }
    if (length(r_bl - pos) < uRadius) {
        spsl_fragcolor = uColor;
    }
    if (length(r_br - pos) < uRadius) {
        spsl_fragcolor = uColor;
    }
    // now we need to fill the center, we can do this with 2 rectangles
    vec2 rect1_tl = tl + vec2(uRadius, 0.0);
    vec2 rect1_wh = vec2(wh.x - uRadius * 2, wh.y);

    if (pos.x > rect1_tl.x && pos.x < rect1_tl.x + rect1_wh.x && pos.y > rect1_tl.y && pos.y < rect1_tl.y + rect1_wh.y) {
        spsl_fragcolor = uColor;
    }

    vec2 rect2_tl = tl + vec2(0.0, uRadius);
    vec2 rect2_wh = vec2(wh.x, wh.y - uRadius * 2);

    if (pos.x > rect2_tl.x && pos.x < rect2_tl.x + rect2_wh.x && pos.y > rect2_tl.y && pos.y < rect2_tl.y + rect2_wh.y) {
        spsl_fragcolor = uColor;
    }
}